<?php

namespace Tests\Feature;

use App\Models\Author;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Symfony\Component\HttpFoundation\Response as ResponseAlias;
use Tests\TestCase;

class BookControllerTest extends TestCase
{
    private array $bookStructure = [
        'id',
        'title',
        'rating',
        'created_at',
        'updated_at',
        'authors' => [
            '*' => [
                'id',
                'name',
                'created_at',
                'updated_at',
            ]
        ]
    ];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Author::factory()->count(10)->create();

        User::factory()->create([
            'login' => 'admin',
            'password' => Hash::make('admin')
        ]);

        DB::table('personal_access_tokens')->insert([
            'tokenable_type' => 'App\Models\User',
            'tokenable_id' => '1',
            'name' => 'api-token',
            'token' => 'a6b4c03eb907cb344e8aea8cdb41341b28bec380a105a7a126eca2f0fe8bcbe1', // 1|vx4AQKppebZGV7moWenUCcmhwS1uKbxBxnVRQJ6S
            'abilities' => '["*"]',
        ]);
    }

    public function test_create_book() {
        $data = [
            'title' => 'example'.time(),
            'rating' => rand(1,5)
        ];

        $this->actingAs($this->getUser())
            ->json('POST', 'api/book', $data)
            ->assertStatus(ResponseAlias::HTTP_CREATED)
            ->assertJsonStructure($this->bookStructure);

        $this->assertDatabaseHas('books', [
            'id' => 1,
            'title' => $data['title'],
            'rating' => $data['rating'],
        ]);
    }

    public function test_create_book_with_authors() {
        $data = [
            'title' => 'example'.time(),
            'rating' => rand(1,5),
            'authors' => [
                0 => ['id' => 1],
                1 => ['id' => 2],
            ],
        ];

        $this->actingAs($this->getUser())
            ->json('POST', 'api/book', $data)
            ->assertStatus(ResponseAlias::HTTP_CREATED)
            ->assertJsonStructure($this->bookStructure);

        $this->assertDatabaseHas('books', [
            'author_id' => 1,
            'book_id' => 2,
        ]);

        $this->assertDatabaseHas('author_book', [
            'author_id' => 2,
            'book_id' => 2,
        ]);
    }

    public function test_create_book_without_data() {
        $data = [

        ];

        $this->actingAs($this->getUser())
            ->json('POST', 'api/book', $data)
            ->assertStatus(ResponseAlias::HTTP_UNPROCESSABLE_ENTITY)
            ->assertJsonStructure(['errors']);
    }

    public function test_search_check_valid_format()
    {
        $this->actingAs($this->getUser())
            ->json('GET', 'api/book')
            ->assertStatus(ResponseAlias::HTTP_OK)
            ->assertJsonStructure([
                '*' => $this->bookStructure
            ]);
    }

    /*
    public function test_show_book() {

    }

    public function test_show_missing_book() {

    }
    */
}
