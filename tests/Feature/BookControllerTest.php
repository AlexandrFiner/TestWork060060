<?php

namespace Tests\Feature;

use App\Models\Author;
use App\Models\Book;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Symfony\Component\HttpFoundation\Response as ResponseAlias;
use Tests\TestCase;

class BookControllerTest extends TestCase
{
    private array $bookStructure = [
        'id',
        'title',
        'rating',
        'created_at',
        'updated_at',
        'authors' => [
            '*' => [
                'id',
                'name',
                'created_at',
                'updated_at',
            ]
        ]
    ];

    private array $messageStructure = [
        'message'
    ];

    private array $errorStructure = [
        'error',
    ];

    private array $successStructure = [
        'success'
    ];

    private array $errorsWithMessageStructure = [
        'message',
        'errors',
    ];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Author::factory()->count(10)->create();

        User::factory()->create([
            'login' => 'admin',
            'password' => Hash::make('admin')
        ]);

        DB::table('personal_access_tokens')->insert([
            'tokenable_type' => 'App\Models\User',
            'tokenable_id' => '1',
            'name' => 'api-token',
            'token' => 'a6b4c03eb907cb344e8aea8cdb41341b28bec380a105a7a126eca2f0fe8bcbe1', // 1|vx4AQKppebZGV7moWenUCcmhwS1uKbxBxnVRQJ6S
            'abilities' => '["*"]',
        ]);
    }

    public function test_user_not_authorized() {
        $this->json('GET', 'api/book')
            ->assertStatus(ResponseAlias::HTTP_UNAUTHORIZED)
            ->assertJsonStructure($this->messageStructure);
    }

    public function test_search_check_valid_format_there_are_books()
    {
        $books = Book::factory()->count(10)->create();
        foreach ($books as $book) {
            // Книги без авторов
            if(rand(0,1))
                continue;

            $authors = Author::all()->random(rand(1,3));
            $book->authors()
                ->attach($authors);
        }

        $this->actingAs($this->getUser())
            ->json('GET', 'api/book')
            ->assertStatus(ResponseAlias::HTTP_OK)
            ->assertJsonStructure([
                '*' => $this->bookStructure
            ]);
    }

    public function test_search_check_valid_format_no_books() {
        $this->actingAs($this->getUser())
            ->json('GET', 'api/book')
            ->assertStatus(ResponseAlias::HTTP_NOT_FOUND)
            ->assertJsonStructure($this->errorStructure);
    }

    public function test_create_book() {
        $data = [
            'title' => 'example'.time(),
            'rating' => rand(1,5)
        ];

        $this->actingAs($this->getUser())
            ->json('POST', 'api/book', $data)
            ->assertStatus(ResponseAlias::HTTP_CREATED)
            ->assertJsonStructure($this->bookStructure);

        $this->assertDatabaseHas('books', [
            'id' => 1,
            'title' => $data['title'],
            'rating' => $data['rating'],
        ]);
    }

    public function test_create_book_with_authors() {
        $data = [
            'title' => 'example'.time(),
            'rating' => rand(1,5),
            'authors' => [
                ['id' => 1],
                ['id' => 2],
            ],
        ];

        $this->actingAs($this->getUser())
            ->json('POST', 'api/book', $data)
            ->assertStatus(ResponseAlias::HTTP_CREATED)
            ->assertJsonStructure($this->bookStructure);

        $this->assertDatabaseHas('author_book', [
            'author_id' => 1,
            'book_id' => 1,
        ]);

        $this->assertDatabaseHas('author_book', [
            'author_id' => 2,
            'book_id' => 1,
        ]);
    }

    public function test_create_book_without_data() {
        $data = [

        ];

        $this->actingAs($this->getUser())
            ->json('POST', 'api/book', $data)
            ->assertStatus(ResponseAlias::HTTP_UNPROCESSABLE_ENTITY)
            ->assertJsonStructure($this->errorsWithMessageStructure);
    }

    public function test_show_book() {
        $book = Book::factory()->count(1)->create()->first();
        $author = Author::find(1)->get()->first();
        $book->authors()->attach($author->id);


        $this->actingAs($this->getUser())
            ->json('GET', 'api/book/'.$book->id)
            ->assertStatus(ResponseAlias::HTTP_OK)
            ->assertExactJson([
                'id' => $book->id,
                'title' => $book->title,
                'rating' => $book->rating,
                'created_at' => $book->created_at,
                'updated_at' => $book->updated_at,
                'authors' => [
                    [
                        'id' => $author->id,
                        'name' => $author->name,
                        'created_at' => $author->created_at,
                        'updated_at' => $author->updated_at,
                    ],
                ],
            ]);
    }

    public function test_show_missing_book() {
        $this->actingAs($this->getUser())
            ->json('GET', 'api/book/0')
            ->assertStatus(ResponseAlias::HTTP_NOT_FOUND)
            ->assertJsonStructure($this->errorStructure);
    }

    public function test_update_book() {
        $book = Book::factory()->count(1)->create()->first();
        $authors = Author::query()->get()->toArray();
        $book->authors()->attach($authors[0]['id']);
        $book->authors()->attach($authors[1]['id']);

        $data = [
            'title' => 'example update',
            'rating' => 1,
            'add_authors' => [
                ['id' => 10],
            ],
            'del_authors' => [
                ['id' => 1],
            ]
        ];

        $this->actingAs($this->getUser())
            ->json('PUT', 'api/book/'.$book->id, $data)
            ->assertStatus(ResponseAlias::HTTP_OK)
            ->assertJson([
                'id' => $book->id,
                'title' => $data['title'],
                'rating' => $data['rating'],
                'authors' => [
                    [
                        'id' => $authors[1]['id'],
                        'name' => $authors[1]['name'],
                    ],
                    [
                        'id' => $authors[9]['id'],
                        'name' => $authors[9]['name'],
                    ],
                ],
            ]);
    }

    public function test_update_book_without_data() {
        $book = Book::factory()->count(1)->create()->first();

        $data = [

        ];

        $this->actingAs($this->getUser())
            ->json('PUT', 'api/book/'.$book->id, $data)
            ->assertStatus(ResponseAlias::HTTP_UNPROCESSABLE_ENTITY)
            ->assertJsonStructure($this->errorsWithMessageStructure);
    }

    public function test_update_missing_book_with_data() {
        $data = [
            'title' => 'example update',
            'rating' => 1,
        ];

        $this->actingAs($this->getUser())
            ->json('PUT', 'api/book/0', $data)
            ->assertStatus(ResponseAlias::HTTP_BAD_REQUEST)
            ->assertJsonStructure($this->errorStructure);
    }

    public function test_update_missing_book_without_data() {
        $data = [

        ];

        $this->actingAs($this->getUser())
            ->json('PUT', 'api/book/0', $data)
            ->assertStatus(ResponseAlias::HTTP_UNPROCESSABLE_ENTITY)
            ->assertJsonStructure($this->errorsWithMessageStructure);
    }

    public function test_delete_missing_book() {
        $this->actingAs($this->getUser())
            ->json('DELETE', 'api/book/0')
            ->assertStatus(ResponseAlias::HTTP_BAD_REQUEST)
            ->assertJsonStructure($this->errorStructure);
    }

    public function test_delete_book() {
        $book = Book::factory()->count(1)->create()->first();

        $this->actingAs($this->getUser())
            ->json('DELETE', 'api/book/'.$book->id)
            ->assertStatus(ResponseAlias::HTTP_OK)
            ->assertJsonStructure($this->successStructure);
    }
}
